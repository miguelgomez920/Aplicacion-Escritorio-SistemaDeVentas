package vista;

import conexion.Conexion;//del paquete conexion importo la clase Conexion
import controlador.Ctrl_Categoria;
import java.sql.Connection;
import java.sql.ResultSet;
import java.awt.Dimension;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import java.sql.PreparedStatement;
import javax.swing.JOptionPane;
import modelo.Categoria;

/**
 *
 * @author migue
 */
public class InterGestionarCategoria extends javax.swing.JInternalFrame {

    private int idCategoria;

    public InterGestionarCategoria() {
        initComponents();
        this.setSize(new Dimension(600, 400));
        this.setTitle("Gestionar Categorias");

        this.CargarTablaCategorias();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable_categorias = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jButton_actualizar = new javax.swing.JButton();
        jButton_eliminar = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        txt_descripcion = new javax.swing.JTextField();
        jLabel_wallpaper = new javax.swing.JLabel();

        setClosable(true);
        setIconifiable(true);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Gestionar Categorias");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 10, -1, -1));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jTable_categorias.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable_categorias);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 330, 230));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 60, 350, 250));

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jButton_actualizar.setBackground(new java.awt.Color(51, 204, 0));
        jButton_actualizar.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButton_actualizar.setText("Actualizar");
        jButton_actualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_actualizarActionPerformed(evt);
            }
        });
        jPanel2.add(jButton_actualizar, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 10, -1, -1));

        jButton_eliminar.setBackground(new java.awt.Color(255, 51, 51));
        jButton_eliminar.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButton_eliminar.setText("Eliminar");
        jButton_eliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_eliminarActionPerformed(evt);
            }
        });
        jPanel2.add(jButton_eliminar, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 40, 90, -1));

        getContentPane().add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 60, 130, 80));

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));
        jPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel2.setText("Descripcion:");
        jPanel3.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, -1, -1));

        txt_descripcion.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jPanel3.add(txt_descripcion, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 40, 170, -1));

        getContentPane().add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 160, 190, 80));

        jLabel_wallpaper.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/fondo3.jpg"))); // NOI18N
        getContentPane().add(jLabel_wallpaper, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 590, 370));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton_eliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_eliminarActionPerformed
        if (!txt_descripcion.getText().isEmpty()) {//si el usuario ha puesto nada en la tabla de texto ya sea seleccionando o escribiendola, es decir si no esta vacia (!)
            Categoria categoria = new Categoria();//para usar el metodo y poder guardar la descripcion que puso el usuario en la caja de texto
            Ctrl_Categoria controlCategoria = new Ctrl_Categoria();//para usar el metodo elimnar que se conecta a la base de datos

            categoria.setDescripcion(txt_descripcion.getText().trim());//guardamos la descripcion
            if (!controlCategoria.eliminar(idCategoria)) {//llamamos al metodo que devuelve un booleano y segun lo que nos entregue (true o false) respondemos 
                JOptionPane.showMessageDialog(null, "Categoria Eliminada");
                txt_descripcion.setText("");
                this.CargarTablaCategorias();

            } else {
                JOptionPane.showMessageDialog(null, "Error al Eliminar categoria");

            }
        } else {
            JOptionPane.showMessageDialog(null, "Seleccione una categoria");
        }
    }//GEN-LAST:event_jButton_eliminarActionPerformed

    private void jButton_actualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_actualizarActionPerformed
        if (!txt_descripcion.getText().isEmpty()) {//si el usuario ha puesto nada en la tabla de texto ya sea seleccionando o escribiendola, es decir si no esta vacia (!)
            Categoria categoria = new Categoria();//para usar el metodo y poder guardar la descripcion que puso el usuario en la caja de texto
            Ctrl_Categoria controlCategoria = new Ctrl_Categoria();//para usar el metodo actualizar que se conecta a la base de datos

            categoria.setDescripcion(txt_descripcion.getText().trim());//guardamos lo de la caja de texto en el atributo descripcion
            if (controlCategoria.actualizar(categoria, idCategoria)) {//usamos el metodo actualizar enviando los datos y dependiendo de lo que nos entregue (true o false) respondemos 
                JOptionPane.showMessageDialog(null, "Categoria Actualizada");
                txt_descripcion.setText("");
                this.CargarTablaCategorias();

            } else {
                JOptionPane.showMessageDialog(null, "Error al Actualizar categoria");

            }
        } else {
            JOptionPane.showMessageDialog(null, "Seleccione una categoria");
        }
    }//GEN-LAST:event_jButton_actualizarActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton_actualizar;
    private javax.swing.JButton jButton_eliminar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel_wallpaper;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    public static javax.swing.JScrollPane jScrollPane1;
    public static javax.swing.JTable jTable_categorias;
    private javax.swing.JTextField txt_descripcion;
    // End of variables declaration//GEN-END:variables

//metodo para mostrar todas las categorias
    private void CargarTablaCategorias() {
        Connection con = Conexion.conectar();// Establecer conexión a la base de datos
        DefaultTableModel model = new DefaultTableModel();// Crear un modelo de tabla por defecto para almacenar los datos
        String sql = "select idCategoria, descripcion, estado from tb_categoria";// Consulta SQL para seleccionar datos de la tabla de categorías
        Statement st;//Declarar un objeto de tipo Statement para ejecutar la consulta

        try {
            st = con.createStatement();// Crear el Statement a partir de la conexión
            ResultSet rs = st.executeQuery(sql);// Ejecutar la consulta SQL y obtener el conjunto de resultados
            // Crear una nueva tabla y agregarla al JScrollPane en el formulario
            InterGestionarCategoria.jTable_categorias = new JTable(model);
            InterGestionarCategoria.jScrollPane1.setViewportView(InterGestionarCategoria.jTable_categorias);
            
            // Agregar columnas al modelo de la tabla
            model.addColumn("idCategoria");
            model.addColumn("descripcion");
            model.addColumn("estado");

            // Llenar el modelo de la tabla con los datos de la consulta
            while (rs.next()) {//mientras se pueda hacer otro next (true) (significa que hay otra fila)
                Object fila[] = new Object[3];
                               
                for (int i = 0; i < 3; i++) {// Iterar sobre las columnas y llenar la fila
                    fila[i] = rs.getObject(i + 1);
                }
                model.addRow(fila);// Agregar la fila al modelo de la tabla
            }
            con.close();// Cerrar la conexión a la base de datos
        } catch (SQLException e) {// Manejar excepciones en caso de error durante la consulta
            System.out.println("Error al llenar la tabla de categorias");
        }

        // Agregar un escuchador de eventos al clic en la tabla
        jTable_categorias.addMouseListener(new MouseAdapter() {//JTable_categorias es una instancia de la clase JTable y esa clase tiene el metodo addMouseListener, el MouseAdapter es una clase anonima y el metodo EnviarDatosCategoriaSeleccionada pertenece a esa clase anonima
            @Override
            public void mouseClicked(MouseEvent e) {
                // Obtener la fila y columna en las que se hizo clic
                int fila_point = jTable_categorias.rowAtPoint(e.getPoint());
                int columna_point = 0;
                
                // Verificar que se hizo clic en una fila válida
                if (fila_point > -1) {
                    // Obtener el valor de la celda en la columna 0 (idCategoria)
                    idCategoria = (int) model.getValueAt(fila_point, columna_point);
                    EnviarDatosCategoriaSeleccionada(idCategoria);// Enviar los datos de la categoría seleccionada a un método, que lo que hace es poner la descripcion de la fila que selecciono en la caja de texto txt_descripcion
                }
            }

            //metodo que permite que al seleccionar la categoria de la tabla, esta ponga automaticamente la descripcion en la caja de texto txt_descripcion
            private void EnviarDatosCategoriaSeleccionada(int idCategoria) {
                try {
                    Connection con = Conexion.conectar();
                    PreparedStatement pst = con.prepareStatement("select * from tb_categoria where idCategoria = '" + idCategoria + "'");
                    ResultSet rs = pst.executeQuery();

                    if (rs.next()) {
                        txt_descripcion.setText(rs.getString("descripcion"));
                    }
                    con.close();

                } catch (SQLException e) {
                    System.out.println("Error al seleccionar categorias");
                }
            }
        });
    }

}
